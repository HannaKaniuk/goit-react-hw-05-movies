{"version":3,"file":"static/js/387.5d572793.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","helppers/fetch.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  list-style-type: none;\n  display: grid;\n  max-width: calc(100vw - 35px);\n  grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));\n  grid-gap: 15px;\n\n  padding: 20px;\n`;\nexport const Name = styled.p`\n  text-align: center;\n  font-size: 16px;\n  font-weight: 700;\n`;\nexport const Character = styled.p`\n  text-align: center;\n  font-size: 14px;\n  font-weight: 500;\n`;\nexport const Item = styled.li`\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  border-radius: 5px;\n  border: 1px solid black;\n  overflow: hidden;\n`;\nexport const ActorImage = styled.img`\n  min-width: 100%;\n  @media screen and (min-width: 768px) {\n    width: 100%;\n  }\n`;\n","import { fetchActors } from 'helppers/fetch';\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList, Name, Character, Item, ActorImage } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchCast = () => {\n      fetchActors(movieId)\n        .then(actorsInfo => {\n          setLoading(true);\n          setActors(actorsInfo);\n        })\n        .catch(error => {\n          console.log(error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    };\n    fetchCast();\n  }, [movieId]);\n  const defaultMovieImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n  return (\n    <CastList>\n      {loading && <Loader />}\n      {actors.map(({ name, character, id, profile_path, original_title }) => (\n        <Item key={id}>\n          <ActorImage\n            width=\"150px\"\n            height=\"225px\"\n            src={\n              profile_path\n                ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                : defaultMovieImg\n            }\n            alt={original_title}\n          />\n          <Name>{name}</Name>\n          <Character>Character:{character}</Character>\n        </Item>\n      ))}\n    </CastList>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst KEY = '4bfe9ac7b716325880075e348301b2b8';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\n// список найпопулярніших фільмів на сьогодні\nexport const fetchTrendingList = async () => {\n  try {\n    const { data } = await axios.get('trending/movie/day', {\n      params: {\n        api_key: KEY,\n        language: 'en-US',\n      },\n    });\n\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching trends:', error);\n    throw error;\n  }\n};\n\n// пошук фільму за ключовим словом на сторінці фільмів\nexport const fetchSearchMovies = async query => {\n  try {\n    const { data } = await axios.get('search/movie', {\n      params: {\n        api_key: KEY,\n        query,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    throw error;\n  }\n};\n// запит повної інформації про фільм для сторінки кінофільму\nexport const fetchMovieInform = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}`, {\n      params: {\n        api_key: KEY,\n        language: 'en-US',\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error('Error fetching movie information:', error);\n    throw error;\n  }\n};\n//запит інформації про акторський склад для сторінки кінофільму\nexport const fetchActors = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/credits`, {\n      params: {\n        api_key: KEY,\n        language: 'en-US',\n      },\n    });\n    return data.cast;\n  } catch (error) {\n    console.error('Error fetching cast:', error);\n    throw error;\n  }\n};\n//запит оглядів для сторінки кінофільму\nexport const fetchReviews = async movieId => {\n  try {\n    const { data } = await axios.get(`movie/${movieId}/reviews`, {\n      params: {\n        api_key: KEY,\n        language: 'en-US',\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.error('Error fetching reviews:', error);\n    throw error;\n  }\n};\n"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","Name","_templateObject2","Character","_templateObject3","Item","_templateObject4","ActorImage","_templateObject5","movieId","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","loading","setLoading","useEffect","fetchActors","then","actorsInfo","catch","error","console","log","finally","_jsxs","children","_jsx","Loader","map","_ref","name","character","id","profile_path","original_title","width","height","src","concat","alt","KEY","axios","fetchTrendingList","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$axios$get","data","_context","prev","next","params","api_key","language","sent","abrupt","results","t0","stop","apply","arguments","fetchSearchMovies","_ref2","_callee2","query","_yield$axios$get2","_context2","_x","fetchMovieInform","_ref3","_callee3","_yield$axios$get3","_context3","_x2","_ref4","_callee4","_yield$axios$get4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_yield$axios$get5","_context5","_x4"],"sourceRoot":""}